import yaml 
import os

def handle_config(filepath):
    full_path = os.path.join(filepath, "config.yml")
    _interface_list = []
    content = None
    with open(full_path, 'r', encoding='UTF8') as stream:
        try:
            content = yaml.safe_load(stream)
            _chain = content["info"]["tags"]["chains"][0]
            content["networks"]["node"] = "eth" if _chain == "ethereum" else _chain
            if "interfaces" in content:
                _interface_list = content.pop("interfaces")
        except yaml.YAMLError as exc: 
            print(exc)
    if content is None:
        print(filepath, "error")
        return False, []

    with open(full_path, 'w', encoding='UTF8') as file:
        yaml.dump(content, file)

    return True, _interface_list

def wrap_interface(line):
    if line == "IERC721.sol" \
        or line == "IERC20.sol" \
        or line == "IWBNB.sol" \
        or line == "IWETH.sol" :
        return f"import \"./interfaces/token/{line}\";\n"
    return f"import \"./interfaces/{line}\";\n"

def handle_exploit(filepath, interface_list):
    full_path = os.path.join(filepath, "exploit.sol")
    if not os.path.exists(full_path):
        print("no exploit.sol")
        return
    with open(full_path, 'r', encoding='UTF8') as f:
        strings = f.readlines()

    for line in strings:
        if "IERC20 " in line and all(["IERC20.sol" not in item for item in interface_list]) :
            interface_list.append("IERC20.sol")
        elif "IWBNB " in line and all(["IWBNB.sol" not in item for item in interface_list]):
            interface_list.append("IWBNB.sol")
        elif "IWETH " in line and all(["IWETH.sol" not in item for item in interface_list]):
            interface_list.append("IWETH.sol")

    if 'import "forge-std/Test.sol";\n' in strings:
        idx = strings.index('import "forge-std/Test.sol";\n')
    elif 'import "hardhat/console.sol";\n' in strings:
        idx = strings.index('import "hardhat/console.sol";\n')
    else:
        print('no import found')
        return
    new_line = list(map(wrap_interface, interface_list))
    new_line.reverse()

    for line in new_line:
        strings.insert(idx+1, line)

    with open(full_path, 'w', encoding='UTF8') as f:
        f.writelines(strings)

def update_exploit(filepath):
    full_path = os.path.join(filepath, "exploit.sol")
    if not os.path.exists(full_path):
        print("no exploit.sol")
        return
    with open(full_path, 'r', encoding='UTF8') as f:
        strings = f.readlines()

    for idx, line in enumerate(strings):
        if "CheatCodes(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D)" in line:
            strings.pop(idx)
            break

    with open(full_path, 'w', encoding='UTF8') as f:
        f.writelines(strings)

def update2_exploit(filepath):
    full_path = os.path.join(filepath, "exploit.sol")
    if not os.path.exists(full_path):
        print("no exploit.sol")
        return
    with open(full_path, 'r', encoding='UTF8') as f:
        strings = f.readlines()

    for idx, line in enumerate(strings):
        if "CheatCodes(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D)" in line:
            strings.pop(idx)
            break

    with open(full_path, 'w', encoding='UTF8') as f:
        f.writelines(strings)


def batch_handle():
    root_path = os.getcwd()
    poc_path = os.path.join("web3_exploit_framework", "modules","exploits")
    full_path = os.path.join(root_path, poc_path)
    file_list = os.listdir(full_path)
    for _path in file_list:
        print(_path, "begin")
        cur_path = os.path.join(full_path, _path)
        if not os.path.isdir(cur_path): continue 
        flag, interfaces = handle_config(cur_path)
        interfaces = [] if interfaces is None else interfaces
        if flag:
            handle_exploit(cur_path, interfaces)
        print(_path, "finish")

def batch_update():
    root_path = os.getcwd()
    poc_path = os.path.join("web3_exploit_framework", "modules","exploits")
    full_path = os.path.join(root_path, poc_path)
    file_list = os.listdir(full_path)
    for _path in file_list[:1]:
        print(_path, "begin")
        cur_path = os.path.join(full_path, _path)
        if not os.path.isdir(cur_path): continue 
        update2_exploit(cur_path)
        print(_path, "finish")

if __name__ == "__main__":
    batch_update()

