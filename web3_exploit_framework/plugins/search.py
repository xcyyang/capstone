"""The Plugin For Searching Interfaces, Tokens"""

import os
import subprocess
from web3_exploit_framework.core.chain_scan_api_manage import ChainScanAPIManager
from web3_exploit_framework.core.platform_dirs import get_cache_folder_path, get_default_interfaces_folder, get_default_tokens_folder
from web3_exploit_framework.core.plugin import Plugin
from pysondb import db
import cmd2
from cmd2 import (
    CommandSet,
    with_argparser,
    with_category,
    with_default_category,
)
from web3_exploit_framework.core.ui.console.output import output_error, output_good, output_info, output_warning
from web3_exploit_framework.core.utils.file import delete_file, delete_folder, dump_json_file_to, find_files, find_files_recusively, find_subdirectory, read_json_file
    
@with_default_category("Search Interfaces/Tokens")
class Search(Plugin):
    info = dict()

    def __init__(self) -> None:
        super().__init__()
        self.info['name'] = 'search'
        self.info['summary'] = 'This plugin is used to search interfaces and token'
        self.info['desc'] = 'This plugin can search commonly used interfaces like PancakeSwap, Uniswap and ERC.'
        self.info['author'] = 'yxcy'
        self.info['email'] = ''
        self.info['ref'] = ['']
        self.info['category'] = 'auxiliary'
        self.info['target'] = ['eth', 'bsc']

    def get_intro(self) -> None:
        return self.info

    def get_command_set(self):
        return self

    def cleanup(self) -> None:
        pass

    def search_tokens_by_keyword(self, chain, keyword):
        path_to_token_database = get_default_tokens_folder()
        path_to_token_database_of_chain = os.path.join(path_to_token_database, chain, 'tokens-'+chain+'.json')
        if not os.path.exists(path_to_token_database_of_chain):
            return []
        
        json = read_json_file(path_to_token_database_of_chain)
        json_with_data = {'data': json}
        temp_path = os.path.join(get_cache_folder_path(), 'tokens-'+chain+'.json')
        dump_json_file_to(json_with_data, temp_path)

        tokenDB=db.getDb(temp_path)
        results = tokenDB.reSearch("symbol", r'(?i)(\w|^)'+keyword+r'(\w|$)')
        delete_file(temp_path)
        return results
    
    def search_interfaces_by_project(self, project, keyword):
        path_to_interfaces_database = get_default_interfaces_folder()
        directories = find_files(project, path_to_interfaces_database)
        results = []
        for directory in directories:
            files = find_files_recusively(keyword, os.path.join(path_to_interfaces_database, directory))
            for file in files:
                results.append(file)
        return results


    def search_interfaces_globally(self, keyword):
        path_to_interfaces_database = get_default_interfaces_folder()
        return find_files_recusively(keyword, path_to_interfaces_database)



    def search_interfacs_by_address(self, chain, address):
        try:
            chain_manager = ChainScanAPIManager()
            bsc = chain_manager.get_evm_chain_scan_interface(chain)
            abi = bsc.get_contract_abi(address)
            name = "Interface_"+address
            echo_result = subprocess.run(["echo", abi], check=True, capture_output=True)
            converted_interface = subprocess.run(["npx", "abi-to-sol", name], input=echo_result.stdout, capture_output=True)
            return converted_interface.stdout.decode()
        except AssertionError:
            return None


    def show_tokens_info(self, token_list: list, chain):
        if len(token_list) == 0:
            self._cmd.poutput(output_warning('No Token Found'))
            return
        self._cmd.poutput(output_info('Results:'))
        self._cmd.poutput(output_info("-------------------------------------------"))
        for token in token_list:
            self._cmd.poutput(output_info('Symbol: ')+output_good(token['symbol']))
            self._cmd.poutput(output_info('Name: ')+output_good(token['name']))
            self._cmd.poutput(output_info('Address: ')+output_good(token['address']))
            self._cmd.poutput(output_info('Website: ')+output_good(token['website']))
            self._cmd.poutput(output_info('Network: ')+output_good(chain))
            self._cmd.poutput(output_info("-------------------------------------------"))

    def show_interfaces_info(self, interface_list: list):
        if len(interface_list) == 0:
            self._cmd.poutput(output_warning('No Interface Found'))
            return
        self._cmd.poutput(
                output_info('Please check the detail of interfaces under this path: ') + 
                output_good(get_default_interfaces_folder())
            )
        for interface in interface_list:
            self._cmd.poutput(
                output_info("Usage: ") +
                output_good(
                    "import \"./interfaces" +
                    interface.replace(get_default_interfaces_folder(),"",1) +
                    "\";"
                )
            )
    
    def show_interfaces_content(self, interface_content):
        if interface_content is None:
            self._cmd.poutput(output_warning('Unverified Contract or EOA Address'))
            return
        self._cmd.poutput(output_info("--------------------------------------------------------------"))
        self._cmd.poutput(output_info("THE CONVERTED INTERFACE: "))
        self._cmd.poutput(output_info("--------------------------------------------------------------"))
        self._cmd.poutput(output_good(interface_content))
        

    """
    Search Command:
    This command is used to search interfaces/tokens with keywords
    """
    search_parser = cmd2.Cmd2ArgumentParser(
        description="This command is used to search interfaces/tokens with keywords"
    )

    search_parser.add_argument(
        "-i",
        "--interface",
        action="store_true",
        help="search interface",
    )

    search_parser.add_argument(
        "-t",
        "--token",
        action="store_true",
        help="search token",
    )

    search_parser.add_argument(
        "-c",
        "--chain",
        nargs="?",
        help="the chain to search interface or token",
    )

    search_parser.add_argument(
        "-a",
        "--address",
        nargs="?",
        help="the address to get interface",
    )

    search_parser.add_argument(
        "-p",
        "--project",
        nargs="?",
        help="search interface by project name",
    )

    search_parser.add_argument(
        "-g",
        "--globally",
        action="store_true",
        help="search interface globally",
    )

    search_parser.add_argument(
        "-k",
        "--keyword",
        nargs="?",
        help="keyword or address",
    )

    @with_argparser(search_parser)  # type: ignore
    def do_search(self, opts: cmd2.Statement):
        if(opts.interface):
            if (opts.globally) and (opts.keyword is not None):
                results = self.search_interfaces_globally(opts.keyword)
                self.show_interfaces_info(results)
            elif (opts.project is not None) and (opts.keyword is not None):
                results = self.search_interfaces_by_project(opts.project, opts.keyword)
                self.show_interfaces_info(results)
            elif (opts.chain is not None) and (opts.address is not None):
                results = self.search_interfacs_by_address(opts.chain, opts.address)
                self.show_interfaces_content(results)
        elif(opts.token and (opts.chain is not None) and (opts.keyword is not None)):
            results = self.search_tokens_by_keyword(opts.chain, opts.keyword)
            self.show_tokens_info(results, opts.chain)
        else:
            self._cmd.poutput(output_error("Unsupported Options"))

    def print_status(self):
        """Print status"""

    def print_error(self):
        """Print error message"""

    def print_good(self):
        """Print good message"""

    def print_line(self):
        """Print one line message"""

    def print_line_prefix(self):
        """Print one line message with prefix"""


