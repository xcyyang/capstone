from web3_exploit_framework.core.module_config import get_url_from_setting_yaml
from web3_exploit_framework.core.plugin import Plugin
from cmd2 import (
    CommandSet,
    with_argparser,
    with_category,
    with_default_category,
)
import cmd2
import shlex
from web3_exploit_framework.core.setting import settings
from web3_exploit_framework.core.utils.command import execute_one_command

class Cast(Plugin):
    info = dict()
    def __init__(self) -> None:
        super().__init__()
        self.info['name'] = 'cast'
        self.info['summary'] = 'This plugin is used to integrate \'cast\' command of foundry'
        self.info['desc'] = 'This plugin is used to integrate \'cast\' command of foundry'
        self.info['author'] = 'foundry'
        self.info['email'] = ''
        self.info['ref'] = ['']
        self.info['category'] = 'auxiliary'
        self.info['target'] = ['eth', 'bsc']

    def get_intro(self) -> None:
        return self.info
    
    """
    Cast Command

    """
    cast_parser = cmd2.Cmd2ArgumentParser(
        description="This command is used to search interfaces/tokens with keywords"
    )

    cast_parser.add_argument(
        "-c",
        "--chain",
        nargs="?",
        help="set rpc url for specifc chain ",
    )
    cast_parser.add_argument(
        "-ch",
        "--cast_help",
        action="store_true",
        help="show the detailed help for cast",
    )

    cast_parser.add_argument(
        "-b",
        "--block",
        nargs="?",
        help="The block height you want to query at. Can be a block number, or any of the tags: earliest, latest or pending.",
    )

    cast_parser.add_argument(
        "command", nargs="?", help="cast command"
    )

    @with_argparser(cast_parser)
    def do_cast(self, opts: cmd2.Statement):
        if opts.cast_help:
            command_list = ['help']
            execute_one_command(['cast']+command_list)
            return
        command_list = shlex.split(opts.command, posix=False)
        if opts.chain is not None:
            rpc_option = ['--rpc-url', get_url_from_setting_yaml(opts.chain)]
            command_list = command_list + rpc_option
        if opts.block is not None:
            block_option = ['--block', opts.block]
            command_list = command_list + block_option
        execute_one_command(['cast']+command_list)

    def get_command_set(self):
        return self

    def cleanup(self) -> None:
        pass