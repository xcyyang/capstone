"""Console for web3 exploit framework"""
import os

import cmd2
from cmd2 import Cmd, with_argparser, with_category


class Str(str):
    """Color preset for string"""

    def red(self):
        return "\033[31m{}\033[0m".format(self)

    def green(self):
        return "\033[32m{}\033[0m".format(self)

    def yellow(self):
        return "\033[33m{}\033[0m".format(self)

    def blue(self):
        return "\033[34m{}\033[0m".format(self)


class Console(Cmd):
    """
    The main command line interpreter for web3 exploit frameworkk console.
    It inherits Cmd2 package for commandline functionality.
    It also initializes plugins manager and module manager

    Current exploit commands defined are:

    init: Initialize the environment of
    list: To list available modules/plugins
    load: Load a specific plugin
    exit: An alias for Cmd2 quit command
    clear: Clear the output of console
    """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, auto_load_commands=False, **kwargs)

        self.intro = (
            "Welcome to the Web3 Exploit Framework."
            " Type help or ? to list commands.\n"
        )
        self.prompt = "({}) > ".format(Str("framework").red())

        self.remove_settable("debug")
        self.remove_settable("allow_style")
        self.remove_settable("always_show_hint")
        self.remove_settable("echo")
        self.remove_settable("feedback_to_output")
        self.remove_settable("max_completion_items")
        self.remove_settable("quiet")
        self.remove_settable("timing")
        self.remove_settable("editor")

    echo_parser = cmd2.Cmd2ArgumentParser()
    echo_parser.add_argument(
        "-p", "--piglatin", action="store_true", help="atinLay"
    )
    echo_parser.add_argument(
        "-s", "--shout", action="store_true", help="N00B EMULATION MODE"
    )
    echo_parser.add_argument(
        "-r", "--repeat", type=int, help="output [n] times"
    )
    echo_parser.add_argument("word", nargs="?", help="word to say")

    @with_argparser(echo_parser)
    @with_category("Command Testing")
    def do_echo(self, opts):
        """Test Command"""
        arg = opts.word
        if opts.piglatin:
            arg = "%s%say" % (arg[1:], arg[0])
        if opts.shout:
            arg = arg.upper()
        repetitions = opts.repeat or 1
        for i in range(min(repetitions, 100)):
            self.poutput(arg)

    @with_category("Common Command")
    def do_list(self, opts):
        """List available modules/plugins"""
        self.poutput("In progress")

    @with_category("Common Command")
    def do_load(self, opts):
        """Load a specific plugin"""
        self.poutput("In progress")

    @with_category("Common Command")
    def do_exit(self, opts):
        """An alias for Cmd2 quit command"""
        self.exit_code = 0
        return True

    @with_category("Common Command")
    def do_clear(self, opts):
        """Clear the output of console"""
        os.system("clear")
