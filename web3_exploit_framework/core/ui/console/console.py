"""Console for web3 exploit framework"""
import os

import cmd2
from cmd2 import Cmd, with_argparser, with_category

from web3_exploit_framework.core.framework import Framework
from web3_exploit_framework.core.setting import settings, save_setting_yaml_file
from web3_exploit_framework.core.ui.console.output import Str
from web3_exploit_framework.core.ui.console.module import LoadableModuleCommandSet
from web3_exploit_framework.core.ui.console.init import LoadableInitializationCommandSet
from web3_exploit_framework.core.ui.console.setting_store import console_setting_store


class Console(Cmd):
    """
    The main command line interpreter for web3 exploit frameworkk console.
    It inherits Cmd2 package for commandline functionality.
    It also initializes plugins manager and module manager

    Current exploit commands defined are:

    init: Initialize the environment of
    list: To list available modules/plugins
    load: Load a specific plugin
    exit: An alias for Cmd2 quit command
    clear: Clear the output of console
    """

    def remove_default_settings(self):
        """Remove Default Setting"""
        # Debug Mode
        self._settables["debug"].set_value("True")
        # 
        self.remove_settable("debug")
        self.remove_settable("allow_style")
        self.remove_settable("always_show_hint")
        self.remove_settable("echo")
        self.remove_settable("feedback_to_output")
        self.remove_settable("max_completion_items")
        self.remove_settable("quiet")
        self.remove_settable("timing")
        self.remove_settable("editor")

    def __init__(self, *args, **kwargs):
        super().__init__(*args, auto_load_commands=False, **kwargs)

        """Set Basic Information"""
        self.intro = (
            "Welcome to the Web3 Exploit Framework."
            " Type help or ? to list commands.\n"
        )
        self.prompt = "({}) > ".format(Str("framework").red())

        """Remove Default Settings of CMD2"""
        self.remove_default_settings()
        
        """Init Framework"""
        self.framework = Framework()
        """Init Customized Console Setting"""
        console_setting_store.load_setting_yaml_to_settable(self)
        """Load Command Set Related to Initialization"""
        self.loadable_init_commmand_set =LoadableInitializationCommandSet()
        self.register_command_set(self.loadable_init_commmand_set)
        """Load Command Set Related to Module Management"""
        self.loadable_module_commmand_set = LoadableModuleCommandSet()
        self.register_command_set(self.loadable_module_commmand_set)

    """
    Echo Command
    """
    echo_parser = cmd2.Cmd2ArgumentParser()
    echo_parser.add_argument(
        "-p", "--piglatin", action="store_true", help="atinLay"
    )
    echo_parser.add_argument(
        "-s", "--shout", action="store_true", help="N00B EMULATION MODE"
    )
    echo_parser.add_argument(
        "-r", "--repeat", type=int, help="output [n] times"
    )
    echo_parser.add_argument("word", nargs="?", help="word to say")

    @with_argparser(echo_parser)
    @with_category("Command Testing")
    def do_echo(self, opts):
        """Test Command"""
        arg = opts.word
        if opts.piglatin:
            arg = "%s%say" % (arg[1:], arg[0])
        if opts.shout:
            arg = arg.upper()
        repetitions = opts.repeat or 1
        for i in range(min(repetitions, 100)):
            self.poutput(arg)
    
    """
    Basic Command 
    """
    @with_category("Common Command")
    def do_exit(self, opts):
        """An alias for Cmd2 quit command"""
        self.exit_code = 0
        return True

    @with_category("Common Command")
    def do_clear(self, opts):
        """Clear the output of console"""
        os.system("clear")
