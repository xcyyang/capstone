import argparse

import cmd2
from cmd2 import (
    CommandSet,
    with_argparser,
    with_category,
    with_default_category,
)

from web3_exploit_framework.core.exceptions import (
    Development_Framework_Not_Initialized,
    Module_Creation_Error,
)
from web3_exploit_framework.core.plugin_manage import PluginManager
from web3_exploit_framework.core.ui.console.output import *


@with_default_category("Plugins")
class LoadablePluginCommandSet(CommandSet):
    def __init__(self):
        super().__init__()
        self.plugin_manager = PluginManager()
    
    """
    Load Command:
    This command is used to load plugin with plugin's name
    """
    load_parser = cmd2.Cmd2ArgumentParser()
    load_parser.add_argument(
        "name", nargs="?", help="The plugin to be loaded/used"
    )

    @with_argparser(load_parser)  # type: ignore
    def do_load(self, opts: cmd2.Statement):
        if opts.name is not None:
            try:
            # Get plugin
                plugin = self.plugin_manager.load_plugin(opts.name)  # type: ignore
                
            # Register plugin's command set
                self._cmd.register_command_set(plugin)

            # Show Plugin
                self._cmd.poutput(
                    output_info("Plugin ") + 
                    output_good(opts.name) + 
                    output_info(" Loaded")
                )
            except KeyError:
                self._cmd.poutput(
                    output_error("Plugin ") + 
                    output_good(opts.name) + 
                    output_error(" Not Found")
                )