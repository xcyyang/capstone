import fnmatch
import json
import os
import re
import shutil

import toml
import yaml
from dynaconf import loaders
from dynaconf.utils.boxing import DynaBox

from web3_exploit_framework.core.exceptions import *

"""Basic File Operation"""


def create_folder_if_not_exist(path):
    try:
        os.makedirs(path, exist_ok=True)
    except Exception as e:
        raise Create_Folder_Error


def create_folders_if_not_exist(paths):
    try:
        for path in paths:
            create_folder_if_not_exist(path)
    except Exception as e:
        raise Create_Folders_Error


def create_folders_under_specific_path(path, folder_list):
    try:
        for name in folder_list:
            create_folder_if_not_exist(os.path.join(path, name))
    except Exception as e:
        raise Create_Folder_Error


def create_new_folder(path):
    try:
        if os.path.exists(path):
            shutil.rmtree(path)
        os.makedirs(path, exist_ok=True)
    except Exception as e:
        raise Create_Folder_Error


def check_if_path_exists(path):
    try:
        return os.path.exists(path)
    except Exception as e:
        raise Path_Check_Error


def copy_file(path, to):
    try:
        shutil.copy(path, to)
    except Exception as e:
        raise Copy_File_Error


def copy_files(paths, to):
    try:
        for path in paths:
            copy_file(path, to)
    except Exception as e:
        raise Copy_File_Error


def copy_files_under_specific_folder(path, file_list, to):
    try:
        for name in file_list:
            copy_file(os.path.join(path, name), to)
    except Exception as e:
        raise Copy_Files_Error


def copy_file_with_relative_folders(src, file, dst):
    try:
        os.makedirs(
            os.path.join(dst, os.path.dirname(os.path.relpath(file, src))),
            exist_ok=True,
        )
        shutil.copy(file, os.path.join(dst, os.path.relpath(file, src)))
    except Exception as e:
        raise Copy_Files_With_Folders_Error


def copy_folder(src, dst):
    try:
        shutil.copytree(src, dst, dirs_exist_ok=True)
    except:
        raise Copy_Folder_Error


def delete_folder(path):
    try:
        if os.path.exists(path):
            shutil.rmtree(path)
    except Exception as e:
        raise Delete_Folder_Error

def delete_file(path):
    try:
        if os.path.exists(path):
            os.remove(path)
    except Exception as e:
        raise Delete_File_Error


"""Find File"""


def get_subdirectory_names(path):
    subfolders = [f.name for f in os.scandir(path) if f.is_dir()]
    return subfolders


def get_subdirectory_paths(path):
    subfolders = [f.path for f in os.scandir(path) if f.is_dir()]
    return subfolders


def find_subdirectory(keyword, path):
    try:
        if keyword is None:
            return []
        subfolders = get_subdirectory_names(path)
        return [name for name in subfolders if keyword in name]
    except Exception as e:
        raise Find_Directory_Error


def find_files(keyword, path="."):
    try:
        rule = re.compile(
            fnmatch.translate("*" + keyword + "*"), re.IGNORECASE
        )
        return [file for file in os.listdir(path) if rule.match(file)]
    except Exception as e:
        raise Find_File_Error


def find_files_recusively(keyword, path="."):
    try:
        matchedFiles = []
        rule = re.compile(
            fnmatch.translate("*" + keyword + "*"), re.IGNORECASE
        )
        for root, dir, files in os.walk(path):
            for file in files:
                if rule.match(file):
                    matchedFiles.append(root + "/" + file)
        return matchedFiles
    except Exception as e:
        raise Find_Files_Recusively_Error


"""Yaml File"""


def read_yaml_file(file_path):
    try:
        with open(file_path, "r") as f:
            return yaml.safe_load(f)
    except Exception as e:
        raise Yaml_Read_Error


def dump_yaml_file_to(content, path_to_file):
    try:
        with open(path_to_file, "w") as f:
            yaml.dump(content, f)
    except Exception as e:
        raise Yaml_Save_Error


"""Toml File"""


def read_toml_file(file_path):
    try:
        with open(file_path, "r") as f:
            return toml.load(f)
    except Exception as e:
        raise Toml_Read_Error


def dump_toml_file_to(content, path_to_file):
    try:
        with open(path_to_file, "w") as f:
            toml.dump(content, f)
    except Exception as e:
        raise Toml_Save_Error


"""Json File"""


def read_json_file(file_path):
    try:
        with open(file_path, "r") as f:
            return json.load(f)
    except Exception as e:
        raise Json_Read_Error


def dump_json_file_to(content, path_to_file):
    try:
        with open(path_to_file, "w") as f:
            json.dump(content, f)
    except Exception as e:
        raise Json_Save_Error


"""Setting File"""


def save_setting_file(data, path):
    try:
        loaders.write(path, DynaBox(data).to_dict())
    except Exception as e:
        raise Setting_Yaml_Save_Error
