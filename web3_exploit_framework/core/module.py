"""Provide the common interface for modules at the most basic levels"""
from enum import Enum
import os
from web3_exploit_framework.core.exceptions import Development_Framework_Not_Initialized, Module_Configuration_Save_Error, Module_Execute_Error, Module_Init_Error, Module_Node_Error, Module_Setup_Error
from web3_exploit_framework.core.module_config import get_url_from_setting_yaml
from web3_exploit_framework.core.utils.file import dump_yaml_file_to, read_yaml_file
from web3_exploit_framework.core.development_framework_manage import DevFrameworkManager

class ModuleStatus(Enum):
    Created = 0
    Initialized = 1
    Pending = 2
    Running = 3
    Finished = 4

class CheckCode(Enum):
    """Related reference:"""

    # https://docs.metasploit.com/docs/development/developing-modules/guides/how-to-write-a-check-method.html
    VULNERABLE = 0
    SAFE = 1
    UNKNOWN = 2
    DETECTED = 3
    UNSUPPORTED = 4


class Module:
    def __init__(self, name, path, dev_mode = False) -> None:
        """Initialize basic info for module from config.yml"""
        try:
            self.name = name
            self.path = path
            self.dev_mode =  dev_mode
            self.config = read_yaml_file(os.path.join(self.path, 'config.yml'))
            self.status = ModuleStatus.Created
        except Exception as e:
            raise Module_Init_Error

    def save_configuration_file(self):
        try:
            if (self.dev_mode):
                dump_yaml_file_to(self.config, os.path.join(self.path, 'config.yml'))
        except Exception as e:
            raise Module_Configuration_Save_Error

    def get_info(self):
        return self.config['info']

    def get_development_framework(self):
        return self.config['development_framework']['framework']
    
    def get_script_file(self):
        return self.config['development_framework']['script']
    
    def get_block_number(self):
        return self.config['networks']['block_number']
    
    def get_is_forking(self):
        return self.config['networks']['is_forking']

    def get_private_key(self):
        return self.config['networks']['private_key']

    def get_solidity_version(self):
        return self.config['networks']['solidity_version']
    
    def get_interfaces(self):
        return list(self.config['interfaces'])
    
    def get_addresses(self):
        return dict(self.config['address'])
    
    def get_options(self):
        return dict(self.config['options'])

    def replicant(self):
        """Create a fresh copy of an instantiated module"""

    def setup(self):
        """Setup temporary framework environment for exploit"""
        try:
            development_framework_manager = DevFrameworkManager()
            development_framework  = development_framework_manager.get_development_framework_class(self.get_development_framework())
            if not development_framework.is_initialized():
                raise Development_Framework_Not_Initialized

            development_framework.create_temporary_folder_for_module(self.name)
            development_framework.prepare_configuration_file(
                self.name, 
                self.config)
            development_framework.prepare_exploit_files(self.name, self.path)
            development_framework.prepare_script_files(self.name, self.path)
            development_framework.prepare_interface_files(self.name, self.config['interfaces'])

            self.status = ModuleStatus.Initialized
        except Development_Framework_Not_Initialized:
            raise Development_Framework_Not_Initialized
        except Exception as e:
            raise Module_Setup_Error

    def check(self):
        """Determine the vulnerable state before using the module"""


    def run(self):
        """Run module/exploit"""
        try:
            development_framework_manager = DevFrameworkManager()
            development_framework  = development_framework_manager.get_development_framework_class(self.get_development_framework())
            if not development_framework.is_initialized():
                raise Development_Framework_Not_Initialized

            development_framework.prepare_configuration_file(
                self.name, 
                self.config)

            development_framework.execute_script_file(
                self.name,
                self.get_is_forking(),
                self.get_script_file())
            
            self.status = ModuleStatus.Finished
        except Development_Framework_Not_Initialized:
            raise Development_Framework_Not_Initialized
        except Exception as e:
            raise Module_Execute_Error
            
    def print_status(self):
        """Print status"""

    def print_error(self):
        """Print error message"""

    def print_good(self):
        """Print good message"""

    def print_line(self):
        """Print one line message"""

    def print_line_prefix(self):
        """Print one line message with prefix"""
