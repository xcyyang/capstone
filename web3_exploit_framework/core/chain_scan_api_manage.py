"""Manage supported chains' Scan APIs"""
from web3_exploit_framework.core.exceptions import Get_API_Key_Error, Get_Scan_Interface_Error, Unsupported_Scan_Interface
from web3_exploit_framework.core.setting import settings, settings_chain_api_mapping
from web3_exploit_framework.api.evm_chain_scan_api.etherscan.etherscan import Etherscan

class ChainScanAPIManager:
    SUPPORTED_CHAINS = {
        'bsc': 'EVM', 
        'eth': 'EVM'
    }

    def __init__(self) -> None:
        pass
    
    def is_suppported_chain(self, chain):
        if chain in self.SUPPORTED_CHAINS.keys():
            return True
        return False

    def list_supported_chain():
        pass

    def list_supported_type_of_chain():
        pass

    def get_the_type_of_specific_chain():
        pass

    def get_api_key(self, chain):
        try:
            return settings['scan_api'][settings_chain_api_mapping[chain]]
        except Exception as e:
            raise Get_API_Key_Error
    
    def get_evm_chain_scan_interface(self, chain) -> Etherscan:
        try:
            if not self.is_suppported_chain(chain):
                raise Unsupported_Scan_Interface
            if self.SUPPORTED_CHAINS[chain] == 'EVM':
                return Etherscan(self.get_api_key(chain), net=chain)
            else:
                raise Unsupported_Scan_Interface
        except Unsupported_Scan_Interface:
            raise Unsupported_Scan_Interface

    def get_non_evm_chain_scan_interface(self, chain):
        pass

        