"""Manage the loading and unloading plugins"""
import os
from web3_exploit_framework.core.exceptions import Get_Plugin_Class_Error, List_Plugin_Error, Load_Plugin_Error, Plugin_Already_Loaded, Reload_Plugin_Error, Show_Loaded_Plugin_Error, Unload_Plugin_Error
from web3_exploit_framework.core.platform_dirs import get_plugins_path
from web3_exploit_framework.core.plugin import Plugin
import importlib

from web3_exploit_framework.core.utils.file import find_files


class PluginSet:
    _plugin_set = dict()

    def add(self, name, plugin: Plugin):
        if name in self._plugin_set.keys():
            raise Plugin_Already_Loaded
        self._plugin_set[name] = plugin

    def delete(self, name):
        self._plugin_set.pop(name)

    def get(self, name) -> Plugin:
        try:
            return self._plugin_set[name]
        except Exception as e:
            raise KeyError


class PluginManager:
    DEFAULT_PLUGIN_DATABASE_PATH = get_plugins_path()
    
    def __init__(self) -> None:
        self.plugin_set = PluginSet()

    def get_plugin_class(
        self, plugin_name=""
    ) -> Plugin:
        try:
            module = importlib.import_module(
                "web3_exploit_framework.plugins"
                + "."
                + plugin_name
            )
            plugin_name_class = getattr(
                module, plugin_name.capitalize()
            )
            return plugin_name_class()
        except Exception as e:
            raise Get_Plugin_Class_Error
    
    def load_plugin(self, plugin_name) -> Plugin:
        if os.path.exists(os.path.join(
            self.DEFAULT_PLUGIN_DATABASE_PATH,
            plugin_name+".py"
            )
        ):
            try:
                plugin = self.get_plugin_class(plugin_name)
                self.plugin_set.add(plugin_name, plugin)
                return plugin
            except:
                raise Load_Plugin_Error
            
    def unload_plugin(self, plugin_name):
        try:
            self.plugin_set.delete(plugin_name)
        except:
            raise Unload_Plugin_Error


    def reload_plugin(self, plugin_name):
        try:
            self.plugin_set.delete(plugin_name)
            self.load_plugin(plugin_name)
        except:
            raise Reload_Plugin_Error

    def list_plugins(self):
        try:
            return find_files('.py',self.DEFAULT_PLUGIN_DATABASE_PATH)
        except:
            raise List_Plugin_Error

    def show_loaded_plugin(self):
        try:
            return self.plugin_set._plugin_set.keys()
        except:
            raise Show_Loaded_Plugin_Error
