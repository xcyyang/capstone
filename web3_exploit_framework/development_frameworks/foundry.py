"""Foundry framework support"""
import os

from web3_exploit_framework.core.development_framework_interface import (
    DevelopmentFramework,
)
from web3_exploit_framework.core.exceptions import (
    Create_Folder_Error,
    Create_Module_Temporary_Folder_Error,
    Development_Framework_Init_Error,
    Execute_Script_File_Error,
    Prepare_Configuration_File_Error,
    Prepare_Exploit_Files_Error,
    Prepare_Interface_Files_Error,
    Prepare_Script_Files,
)
from web3_exploit_framework.core.module_config import get_url_from_setting_yaml
from web3_exploit_framework.core.platform_dirs import (
    get_default_interfaces_folder,
    get_development_framework_configuration_path,
    get_development_framework_path,
    get_module_cache_path,
)
from web3_exploit_framework.core.utils.command import (
    execute_command_by_os_system,
    execute_one_command,
    execute_one_command_under_specific_directory,
    execute_softlink_creation,
    is_command,
)
from web3_exploit_framework.core.utils.file import (
    check_if_path_exists,
    copy_file,
    copy_file_with_relative_folders,
    copy_files_under_specific_folder,
    create_folder_if_not_exist,
    create_folders_under_specific_path,
    create_new_folder,
    dump_json_file_to,
    dump_toml_file_to,
    dump_yaml_file_to,
    find_files_recusively,
    read_json_file,
    read_toml_file,
)


class Foundry(DevelopmentFramework):
    """Basic"""

    NAME = "foundry"

    """Configuration Related"""
    LIB = "lib"
    SUBDIRECTORIES = ["src", "test", "script"]
    FOUNDRY_TOML = "foundry.toml"
    CONFIGURATION_FILE = ["foundry.toml"]
    SCRIPT_FILE = "attack_default.t.sol"

    """Init Environment"""
    INSTALL_FOUNDRYUP = "curl -L https://foundry.paradigm.xyz | bash"
    INSTALL_FOUNDRYUP_PART_1 = ["curl", "-L", "https://foundry.paradigm.xyz"]
    INSTALL_FOUNDRYUP_PART_2 = ["bash"]
    INSTALL_FORGE = ["foundryup"]

    """Command Related"""
    INIT_ENVIRONMENT_COMMAND = ["forge", "init", "--force"]

    def __init__(self) -> None:
        super().__init__()

    def get_path_data_folder(self):
        """get the path to data folder for development framework"""
        return get_development_framework_path(self.NAME)

    def is_initialized(self):
        """check if this development framework is initialized"""
        path_to_lib = os.path.join(self.get_path_data_folder(), self.LIB)
        if not check_if_path_exists(path_to_lib):
            return False
        return True

    def install_foundryup(self):
        """install foundryup"""
        execute_command_by_os_system(self.INSTALL_FOUNDRYUP)

    def install_forge(self):
        """install forge"""
        execute_one_command(self.INSTALL_FORGE)

    def init_environment(self):
        """initialize the environment for framework"""
        try:
            if not is_command("forge"):
                self.install_foundryup()
                self.install_forge()
            create_folder_if_not_exist(self.get_path_data_folder())
            execute_one_command_under_specific_directory(
                self.INIT_ENVIRONMENT_COMMAND, self.get_path_data_folder()
            )
        except Exception as e:
            raise Development_Framework_Init_Error

    def get_temporary_folder_for_module(self, module_name):
        """get temporary folder for module"""
        return os.path.join(get_module_cache_path(), self.NAME, module_name)

    def create_temporary_folder_for_module(self, module_name):
        """create temporary folder for module"""
        try:
            path_to_temporary_folder = self.get_temporary_folder_for_module(
                module_name
            )
            create_new_folder(path_to_temporary_folder)
            create_folders_under_specific_path(
                path_to_temporary_folder, self.SUBDIRECTORIES
            )
            execute_softlink_creation(
                os.path.join(self.get_path_data_folder(), self.LIB),
                os.path.join(path_to_temporary_folder, self.LIB),
            )
        except Exception as e:
            raise Create_Module_Temporary_Folder_Error

    def prepare_exploit_files(self, module_name, path):
        """prepare exploit file based on module"""
        try:
            path_to_temporary_folder = self.get_temporary_folder_for_module(
                module_name
            )
            path_to_contracts_folder = os.path.join(
                path_to_temporary_folder, self.SUBDIRECTORIES[0]
            )
            solidity_files = find_files_recusively(".sol", path)
            for solidity_file in solidity_files:
                if ".t.sol" in solidity_file:
                    continue
                copy_file_with_relative_folders(
                    path, solidity_file, path_to_contracts_folder
                )
        except Exception as e:
            raise Prepare_Exploit_Files_Error

    def prepare_configuration_file(self, module_name, config):
        """prepare configuration file based on module"""
        try:
            path_to_temporary_folder = self.get_temporary_folder_for_module(
                module_name
            )
            path_to_module_config_json = os.path.join(
                path_to_temporary_folder, "config.json"
            )

            url = get_url_from_setting_yaml(config["networks"]["node"])

            """Modify foundry.toml"""
            path_to_original_foundry_toml = os.path.join(
                get_development_framework_configuration_path(self.NAME),
                self.FOUNDRY_TOML,
            )
            path_to_module_foundry_toml = os.path.join(
                path_to_temporary_folder, self.FOUNDRY_TOML
            )
            foundry_toml = read_toml_file(path_to_original_foundry_toml)
            foundry_toml["profile"]["default"]["rpc_endpoints"][
                config["networks"]["node"]
            ] = url
            dump_toml_file_to(foundry_toml, path_to_module_foundry_toml)

            """Dump config to config.json"""
            dump_json_file_to(config, path_to_module_config_json)

        except Exception as e:
            raise Prepare_Configuration_File_Error

    def prepare_script_files(self, module_name, path):
        """prepare script file based on module"""
        try:
            path_to_temporary_folder = self.get_temporary_folder_for_module(
                module_name
            )
            path_to_scripts_folder = os.path.join(
                path_to_temporary_folder, self.SUBDIRECTORIES[1]
            )
            script_files = find_files_recusively(".t.sol", path)
            for script_file in script_files:
                copy_file_with_relative_folders(
                    path, script_file, path_to_scripts_folder
                )

            path_to_default_script = os.path.join(
                get_development_framework_configuration_path(self.NAME),
                self.SCRIPT_FILE,
            )
            copy_file(path_to_default_script, path_to_scripts_folder)
        except Exception as e:
            raise Prepare_Script_Files

    def prepare_default_DeFiHackLabs_interfaces_file(self, module_name):
        path_to_temporary_folder = self.get_temporary_folder_for_module(
            module_name
        )
        path_to_DeFiHackLabs_interfaces = os.path.join(
            get_development_framework_configuration_path(self.NAME),
            "interface.sol",
        )
        path_to_contracts_folder = os.path.join(
            path_to_temporary_folder, self.SUBDIRECTORIES[0]
        )
        copy_file(path_to_DeFiHackLabs_interfaces, path_to_contracts_folder)

    def prepare_interface_files(self, module_name, interfaces):
        """parpare interfaces file based on module"""
        try:
            self.prepare_default_DeFiHackLabs_interfaces_file(module_name)

            path_to_temporary_folder = self.get_temporary_folder_for_module(
                module_name
            )
            path_to_contracts_folder = os.path.join(
                path_to_temporary_folder, self.SUBDIRECTORIES[0]
            )
            if interfaces is not None:
                for interface in interfaces:
                    copy_file_with_relative_folders(
                        get_default_interfaces_folder(),
                        os.path.join(
                            get_default_interfaces_folder(), interface
                        ),
                        path_to_contracts_folder,
                    )
        except Exception as e:
            raise Prepare_Interface_Files_Error

    def execute_script_file(self, module_name, is_forking, script_file=None):
        """execute script file"""
        try:
            if script_file == "":
                script_file = self.SCRIPT_FILE
            path_to_temporary_folder = self.get_temporary_folder_for_module(
                module_name
            )
            if is_forking:
                execute_one_command_under_specific_directory(
                    ["forge", "test", "--match-test", "testAttack", "--contracts", "./test/" + script_file, "-vvv"],  # type: ignore
                    path_to_temporary_folder,
                )
            else:
                raise Exception(
                    "Launching attack to unforked network is not supported right now"
                )
        except Exception as e:
            raise Execute_Script_File_Error

    def execute_command(self, module_name, command):
        """execute framework's command"""
        pass
