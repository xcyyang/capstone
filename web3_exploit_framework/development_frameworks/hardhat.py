"""Hardhat framework support"""
import os

from web3_exploit_framework.core.development_framework_interface import (
    DevelopmentFramework,
)
from web3_exploit_framework.core.exceptions import (
    Create_Folder_Error,
    Create_Module_Temporary_Folder_Error,
    Development_Framework_Init_Error,
    Execute_Script_File_Error,
    Prepare_Configuration_File_Error,
    Prepare_Exploit_Files_Error,
    Prepare_Interface_Files_Error,
    Prepare_Script_Files,
)
from web3_exploit_framework.core.module_config import get_url_from_setting_yaml
from web3_exploit_framework.core.platform_dirs import (
    get_default_interfaces_folder,
    get_development_framework_configuration_path,
    get_development_framework_path,
    get_module_cache_path,
)
from web3_exploit_framework.core.utils.command import (
    execute_one_command_under_specific_directory,
    execute_softlink_creation,
)
from web3_exploit_framework.core.utils.file import (
    check_if_path_exists,
    copy_file,
    copy_file_with_relative_folders,
    copy_files_under_specific_folder,
    create_folder_if_not_exist,
    create_folders_under_specific_path,
    create_new_folder,
    dump_yaml_file_to,
    find_files_recusively,
)


class Hardhat(DevelopmentFramework):
    """Basic"""

    NAME = "hardhat"

    """Configuration Related"""
    PACKAGE_FILE = "package.json"
    NODE_MODULE = "node_modules"
    SUBDIRECTORIES = ["contracts", "scripts"]
    CONFIGURATION_FILES = [
        "hardhat.config.ts",
        "package.json",
        "tsconfig.json",
    ]
    SCRIPT_FILE = "attack_default.ts"

    """Command Related"""
    INIT_ENVIRONMENT_COMMAND = ["npm", "install"]

    def __init__(self) -> None:
        super().__init__()

    def get_path_data_folder(self):
        """get the path to data folder for development framework"""
        return get_development_framework_path(self.NAME)

    def init_environment(self):
        try:
            create_folder_if_not_exist(self.get_path_data_folder())
            path_to_package_json = os.path.join(
                get_development_framework_configuration_path(self.NAME),
                self.PACKAGE_FILE,
            )
            copy_file(path_to_package_json, self.get_path_data_folder())
            execute_one_command_under_specific_directory(
                self.INIT_ENVIRONMENT_COMMAND, self.get_path_data_folder()
            )
        except Exception as e:
            raise Development_Framework_Init_Error

    def is_initialized(self):
        path_to_node_modules = os.path.join(
            self.get_path_data_folder(), self.NODE_MODULE
        )
        if not check_if_path_exists(path_to_node_modules):
            return False
        return True

    def get_temporary_folder_for_module(self, module_name):
        return os.path.join(get_module_cache_path(), self.NAME, module_name)

    def create_temporary_folder_for_module(self, module_name):
        try:
            path_to_temporary_folder = self.get_temporary_folder_for_module(
                module_name
            )
            create_new_folder(path_to_temporary_folder)
            create_folders_under_specific_path(
                path_to_temporary_folder, self.SUBDIRECTORIES
            )
            copy_files_under_specific_folder(
                get_development_framework_configuration_path(self.NAME),
                self.CONFIGURATION_FILES,
                path_to_temporary_folder,
            )
            execute_softlink_creation(
                os.path.join(self.get_path_data_folder(), self.NODE_MODULE),
                os.path.join(path_to_temporary_folder, self.NODE_MODULE),
            )
        except Exception as e:
            raise Create_Module_Temporary_Folder_Error

    def prepare_exploit_files(self, module_name, path):
        try:
            path_to_temporary_folder = self.get_temporary_folder_for_module(
                module_name
            )
            path_to_contracts_folder = os.path.join(
                path_to_temporary_folder, self.SUBDIRECTORIES[0]
            )
            solidity_files = find_files_recusively(".sol", path)
            for solidity_file in solidity_files:
                copy_file_with_relative_folders(
                    path, solidity_file, path_to_contracts_folder
                )
        except Exception as e:
            raise Prepare_Exploit_Files_Error

    def prepare_configuration_file(self, module_name, config):
        """prepare configuration file based on module"""
        try:
            url = get_url_from_setting_yaml(config["networks"]["node"])
            path_to_temporary_folder = self.get_temporary_folder_for_module(
                module_name
            )
            path_to_module_config_yaml = os.path.join(
                path_to_temporary_folder, "config.yml"
            )
            # copy_file(path_to_module_config_yaml, path_to_temporary_folder)
            config["networks"]["url"] = url
            dump_yaml_file_to(config, path_to_module_config_yaml)
            config["networks"].pop("url")
        except Exception as e:
            raise Prepare_Configuration_File_Error

    def prepare_script_files(self, module_name, path):
        """prepare script file based on module"""
        try:
            path_to_temporary_folder = self.get_temporary_folder_for_module(
                module_name
            )
            path_to_scripts_folder = os.path.join(
                path_to_temporary_folder, self.SUBDIRECTORIES[1]
            )
            script_files = find_files_recusively(".ts", path)
            for script_file in script_files:
                copy_file_with_relative_folders(
                    path, script_file, path_to_scripts_folder
                )

            path_to_default_script = os.path.join(
                get_development_framework_configuration_path(self.NAME),
                self.SCRIPT_FILE,
            )
            copy_file(path_to_default_script, path_to_scripts_folder)
        except Exception as e:
            raise Prepare_Script_Files

    def prepare_interface_files(self, module_name, interfaces):
        """prepare interfaces file"""
        try:
            path_to_temporary_folder = self.get_temporary_folder_for_module(
                module_name
            )
            path_to_contracts_folder = os.path.join(
                path_to_temporary_folder, self.SUBDIRECTORIES[0]
            )
            if interfaces is not None:
                for interface in interfaces:
                    copy_file_with_relative_folders(
                        get_default_interfaces_folder(),
                        os.path.join(
                            get_default_interfaces_folder(), interface
                        ),
                        path_to_contracts_folder,
                    )
        except Exception as e:
            raise Prepare_Interface_Files_Error

    def execute_script_file(self, module_name, is_forking, script_file=None):
        """execute script file"""
        try:
            if script_file == "":
                script_file = self.SCRIPT_FILE
            path_to_temporary_folder = self.get_temporary_folder_for_module(
                module_name
            )
            if is_forking:
                execute_one_command_under_specific_directory(
                    ["npx", "hardhat", "run", "scripts/" + script_file, "--network", "hardhat"],  # type: ignore
                    path_to_temporary_folder,
                )
            else:
                execute_one_command_under_specific_directory(
                    ["npx", "hardhat", "run", "scripts/" + script_file, "--network", "hardhat_without_forking"],  # type: ignore
                    path_to_temporary_folder,
                )
        except Exception as e:
            raise Execute_Script_File_Error

    def execute_command(self, module_name, command):
        """execute framework's command"""
        pass
